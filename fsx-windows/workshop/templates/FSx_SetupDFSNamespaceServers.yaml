---
AWSTemplateFormatVersion: 2010-09-09

Description: Launch two Amazon EC2 Windows instances and setup Microsoft DFS namespaces for Amazon FSx for Windows File Server

Metadata:

  Authors:
    Description: Darryl Osborne (darrylo@amazon.com)
  License:
    Description: 'Copyright 2018 Amazon.com, Inc. and its affiliates. All Rights Reserved.
      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at
      http://aws.amazon.com/asl/
      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Microsoft AD
      Parameters:
        - DirectoryId
    - Label:
        default: Amazon EC2 Windows Instances
      Parameters:
        - KeyName
        - InstanceType
        - SecurityGroup
        - SubnetIds
    ParameterLabels:
      DirectoryId:
        default: Directory Id
      KeyName:
        default: EC2 key pair
      InstanceType:
        default: EC2 instance type
      SecurityGroups:
        default: Security groups
      SubnetIds:
        default: Subnets

Parameters:

  DirectoryId:
    AllowedPattern: ^(d-)([a-z0-9]{10})$
    Description: AWS Managed Microsoft AD Id (e.g., d-0123456789)
    Type: String
  KeyName:
    Description: An existing Amazon EC2 key pair
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    AllowedValues: 
    - t3.small
    - t3.medium
    - t3.large
    - m5.large
    - m5.xlarge
    Default: t3.small
    Description: Amazon EC2 instance type
    Type: String
  SecurityGroup:
    Description: Select the security group.
    Type: AWS::EC2::SecurityGroup::Id
  SubnetIds:
    Description: Select two existing subnets.
    Type: List<AWS::EC2::Subnet::Id>

Mappings:

  RegionMap:
    us-east-1:
      AMI: ami-01945499792201081
    us-east-2:
      AMI: ami-0ca3e3965ada31684
    us-west-2:
      AMI: ami-0a98eba42e9bf85c9
    eu-west-1:
      AMI: ami-0b2744e066ace793d

Resources:

  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      Monitoring: true
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: 
        - !Ref SecurityGroup
      SsmAssociations:
      - DocumentName: !Ref FSxDomainJoinInstallDFS
        AssociationParameters:
        - Key: directoryId
          Value:
          - !Ref DirectoryId
        - Key: directoryName
          Value:
          - !GetAtt ActiveDirectory.Name
        - Key: dnsIpAddresses
          Value:
          - !Select [ 0, !GetAtt ActiveDirectory.DnsIpAddrs ]
          - !Select [ 1, !GetAtt ActiveDirectory.DnsIpAddrs ] 
      SubnetId: !Select [ 0, !Ref SubnetIds ]
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NSS1-', !Ref 'AWS::StackName' ] ]
  Instance2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
      Monitoring: true
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds: 
        - !Ref SecurityGroup
      SsmAssociations:
      - DocumentName: !Ref FSxDomainJoinInstallDFS
        AssociationParameters:
        - Key: directoryId
          Value:
          - !Ref DirectoryId
        - Key: directoryName
          Value:
          - !GetAtt ActiveDirectory.Name
        - Key: dnsIpAddresses
          Value:
          - !Select [ 0, !GetAtt ActiveDirectory.DnsIpAddrs ]
          - !Select [ 1, !GetAtt ActiveDirectory.DnsIpAddrs ]    
      SubnetId: !Select [ 1, !Ref SubnetIds ]
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'NSS2-', !Ref 'AWS::StackName' ] ]
  FSxDomainJoinInstallDFS:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "1.2"
        description: Join instances to an AWS Directory Service domain
        parameters:
          directoryId:
            type: String
          directoryName:
            type: String
          dnsIpAddresses:
            type: StringList
            default: []
        runtimeConfig:
          aws:domainJoin:
            properties:
            - id: 0.aws:domainJoin
              directoryId: "{{ directoryId }}"
              directoryName: "{{ directoryName }}"
              dnsIpAddresses: "{{ dnsIpAddresses }}"
          aws:runPowerShellScript:
            properties:
            - id: 1.aws:runPowerShellScript
              timeoutSeconds: 300
              runCommand:
              - Install-WindowsFeature -Name FS-FileServer, FS-DFS-namespace -IncludeManagementTools;
              - Install-WindowsFeature -Name RSAT-DFS-Mgmt-Con
              - New-Item -Type Directory -Path "C:\DFS"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  ActiveDirectoryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        - 'arn:aws:iam::aws:policy/AWSDirectoryServiceReadOnlyAccess'
      Path: "/"
  ActiveDirectoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: 'amazon-fsx-private-beta'
        S3Key: 'ActiveDirectoryCustomResource.zip'
      Handler: 'ad.handler'
      Runtime: 'nodejs10.x'
      Timeout: 30
      Role: !GetAtt ActiveDirectoryRole.Arn
  ActiveDirectory:
    Type: 'Custom::ActiveDirectory'
    Properties:
      ServiceToken: !GetAtt ActiveDirectoryFunction.Arn
      Region: !Ref 'AWS::Region'
      ID: !Ref DirectoryId

